import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.markdown import text

from db.conn import session
from db.utils import search_by_tg_id
from keyboards.markup import set_employee_inline, set_director_inline
from states.states import Auth, Entered

router = Router(name="commands-router")

START_MESSAGE = text(
    "<b>–Ø –±–æ—Ç –æ—Ç 7versts</b> ‚úåÔ∏è\n",
    "–ü–æ–∫–∞ —á—Ç–æ, –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–ª–µ–¥—É—é—â–∏–π:",
    "...functional...",
    "–û–¥–Ω–∞–∫–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —è —Å—Ç–∞–Ω—É –±–æ–ª—å—à–∏–º –∏ —Å–∏–ª—å–Ω—ã–º üí™\n",
    "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b> :",
    "<b>/start</b> - <em>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úåÔ∏è</em>",
    "<b>/login</b> - <em>–í—Ö–æ–¥, –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üí∏</em>",
    "<b>/menu</b> - <em>–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</em>",
    "<b>/logout</b> - <em>–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã ‚ùå</em>",
    sep="\n",
)


@router.message(Command("start"))
@router.message(F.text.casefold() == "start")
async def send_welcome(message: Message):
    """
    `/start` command
    """
    await message.answer(text=START_MESSAGE, parse_mode="HTML")


@router.message(Command(commands=["login"]))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    This handler receive messages with `/login` command
    """
    await state.set_state(Auth.log_in)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ—Ä—é, –µ—Å—Ç—å –ª–∏ –≤—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
    user_id = message.from_user.id
    if user := search_by_tg_id(session, str(user_id)):
        await state.set_state(Entered.in_system)
        await state.update_data(user=user)
        await message.answer(f"–Ø –≤–∞—Å –Ω–∞—à–µ–ª, {user.name} {user.surname}")

        if user.role == "employee":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=set_employee_inline().as_markup())
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=set_director_inline().as_markup())
    else:
        await state.set_state(Auth.set_login)
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –Ω–∞—à–µ–ª, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–π—Ç–∏ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω")


@router.message(Command("logout"))
@router.message(F.text.casefold() == "logout")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.reply("–í—ã –∏ —Ç–∞–∫ –±—ã–ª–∏ –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ —è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–µ–ª",
                            reply_markup=ReplyKeyboardRemove())
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Command("menu"))
@router.message(F.text.casefold() == "menu")
async def call_to_menu_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    if not "user" in data:
        await message.reply("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return

    if data["user"].role == "employee":
        await state.set_state(Entered.in_system)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=set_employee_inline().as_markup())
    else:
        await state.set_state(Entered.in_system)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=set_director_inline().as_markup())
